CCS PCM C Compiler, Version 5.015, 5967               12-May-25 18:46

               Filename:   C:\Users\yaeli\Downloads\OCTAVO semestre\Microcontroladores Teoria\Tarea_I2C\Esclavo\Esclavo.lst

               ROM used:   164 words (2%)
                           Largest free fragment is 2048
               RAM used:   14 (4%) at main() level
                           14 (4%) worst case
               Stack used: 1 locations (0 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   041
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  MOVLW  8C
0018:  MOVWF  04
0019:  BTFSS  00.3
001A:  GOTO   01D
001B:  BTFSC  0C.3
001C:  GOTO   02E
001D:  MOVF   22,W
001E:  MOVWF  04
001F:  MOVF   23,W
0020:  MOVWF  77
0021:  MOVF   24,W
0022:  MOVWF  78
0023:  MOVF   25,W
0024:  MOVWF  79
0025:  MOVF   26,W
0026:  MOVWF  7A
0027:  MOVF   20,W
0028:  MOVWF  0A
0029:  SWAPF  21,W
002A:  MOVWF  03
002B:  SWAPF  7F,F
002C:  SWAPF  7F,W
002D:  RETFIE
002E:  BCF    0A.3
002F:  BCF    0A.4
0030:  GOTO   031
.................... #include <16F887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
....................  
.................... #list 
....................  
.................... #use delay(clock=20M, crystal=20000000) 
.................... #use I2C(SLAVE, SDA=PIN_C4, SCL=PIN_C3, address=0xA0, SLOW)  // Configuración como esclavo I2C 
.................... #use standard_io(B) 
....................  
.................... #define led_1 PIN_B0                                        // Pin del led 
....................  
.................... int8 dato_recibido;                                         // Almacena el dato que envía el maestro 
....................  
.................... #INT_SSP                                                   // Interrupción por I2C 
.................... void interrupcion_i2c() 
.................... { 
....................    if(i2c_poll())                                          // Verifica si se han recibido datos por I2C 
0031:  BSF    03.5
0032:  BTFSS  14.0
0033:  GOTO   03C
....................    { 
....................       dato_recibido = i2c_read();                          // Lee el dato recibido por I2C y lo almacena 
0034:  BCF    03.5
0035:  BCF    14.6
0036:  BTFSS  0C.3
0037:  GOTO   036
0038:  MOVF   13,W
0039:  BSF    14.4
003A:  MOVWF  28
003B:  BSF    03.5
....................    } 
003C:  BCF    03.5
003D:  BCF    0C.3
003E:  BCF    0A.3
003F:  BCF    0A.4
0040:  GOTO   01D
.................... } 
....................  
.................... void main() 
0041:  MOVF   03,W
0042:  ANDLW  1F
0043:  MOVWF  03
0044:  MOVLW  FF
0045:  MOVWF  27
0046:  BSF    27.3
0047:  MOVF   27,W
0048:  BSF    03.5
0049:  MOVWF  07
004A:  BCF    03.5
004B:  BSF    27.4
004C:  MOVF   27,W
004D:  BSF    03.5
004E:  MOVWF  07
004F:  MOVLW  A0
0050:  MOVWF  13
0051:  MOVLW  36
0052:  BCF    03.5
0053:  MOVWF  14
0054:  BSF    03.5
0055:  BSF    11.0
0056:  BSF    03.6
0057:  MOVF   09,W
0058:  ANDLW  C0
0059:  MOVWF  09
005A:  BCF    03.6
005B:  BCF    1F.4
005C:  BCF    1F.5
005D:  MOVLW  00
005E:  BSF    03.6
005F:  MOVWF  08
0060:  BCF    03.5
0061:  CLRF   07
0062:  CLRF   08
0063:  CLRF   09
0064:  BCF    03.7
.................... { 
....................    
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_1);                // Configura Timer0 
0065:  BSF    03.5
0066:  BCF    03.6
0067:  MOVF   01,W
0068:  ANDLW  C7
0069:  IORLW  08
006A:  MOVWF  01
....................    setup_timer_1(T1_DISABLED);                             // Deshabilita Timer1 
006B:  BCF    03.5
006C:  CLRF   10
....................    setup_timer_2(T2_DISABLED,0,1);                         // Deshabilita Timer2 
006D:  MOVLW  00
006E:  MOVWF  78
006F:  MOVWF  12
0070:  MOVLW  00
0071:  BSF    03.5
0072:  MOVWF  12
....................    setup_adc_ports(NO_ANALOGS);                            // Deshabilita ADC 
0073:  BSF    03.6
0074:  MOVF   09,W
0075:  ANDLW  C0
0076:  MOVWF  09
0077:  BCF    03.6
0078:  BCF    1F.4
0079:  BCF    1F.5
007A:  MOVLW  00
007B:  BSF    03.6
007C:  MOVWF  08
....................    setup_adc(ADC_OFF);                                     // Apaga ADC 
007D:  BCF    03.5
007E:  BCF    03.6
007F:  BCF    1F.0
....................    setup_CCP1(CCP_OFF);                                    // Deshabilita CCP1 
0080:  MOVLW  F0
0081:  ANDWF  17,F
....................    setup_CCP2(CCP_OFF);                                    // Deshabilita CCP2 
0082:  ANDWF  1D,F
....................     
....................    enable_interrupts(INT_SSP);                             // Habilita la interrupción por I2C 
0083:  BSF    03.5
0084:  BSF    0C.3
....................    enable_interrupts(GLOBAL);                              // Habilita las interrupciones globales 
0085:  MOVLW  C0
0086:  BCF    03.5
0087:  IORWF  0B,F
....................     
....................    output_b(0x00);                                         // Inicializa PORTB 
0088:  BSF    03.5
0089:  CLRF   06
008A:  BCF    03.5
008B:  CLRF   06
....................    set_tris_b(0x00);                                       // Configura PORTB como salidas (excepto RB0 si es entrada) 
008C:  MOVLW  00
008D:  BSF    03.5
008E:  MOVWF  06
....................    output_low(led_1);                                      // Inicializa el led apagado 
008F:  BCF    06.0
0090:  BCF    03.5
0091:  BCF    06.0
....................     
....................    while(true) 
....................    { 
....................       if(dato_recibido == 0x10)                            // Si el dato recibido es 0x10 
0092:  MOVF   28,W
0093:  SUBLW  10
0094:  BTFSS  03.2
0095:  GOTO   09A
....................       { 
....................          output_high(led_1);                               // Enciende el led 
0096:  BSF    03.5
0097:  BCF    06.0
0098:  BCF    03.5
0099:  BSF    06.0
....................       } 
....................       if(dato_recibido == 0x20)                            // Si el dato recibido es 0x20 
009A:  MOVF   28,W
009B:  SUBLW  20
009C:  BTFSS  03.2
009D:  GOTO   0A2
....................       { 
....................          output_low(led_1);                                // Apaga el led 
009E:  BSF    03.5
009F:  BCF    06.0
00A0:  BCF    03.5
00A1:  BCF    06.0
....................       } 
00A2:  GOTO   092
....................    } 
.................... } 
00A3:  SLEEP

Configuration Fuses:
   Word  1: 2FE2   HS NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
